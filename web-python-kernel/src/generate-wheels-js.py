#!/usr/bin/env python3
"""
Generate _pypi.ts file and wheel files for the Deno App Engine.
"""

import os
import json
import shutil
import subprocess
import sys
from pathlib import Path

def which(cmd):
    """find a command, maybe with a weird windows extension"""
    return str(
        Path(
            shutil.which(cmd)
            or shutil.which(f"{cmd}.exe")
            or shutil.which(f"{cmd}.cmd")
            or shutil.which(f"{cmd}.bat")
        ).resolve()
    )

# Constants for our project
ENC = "utf-8"
KERNEL_DIR = Path(__file__).parent
KERNEL_PYPI_DIR = KERNEL_DIR / "pypi"
KERNEL_PYPI_TS = KERNEL_DIR / "_pypi.ts"
KERNEL_PACKAGE_JSON = json.loads((KERNEL_DIR / "package.json").read_text(ENC))
NOARCH_WHL = "-py3-none-any.whl"

# Get SOURCE_DATE_EPOCH for reproducible builds
try:
    SOURCE_DATE_EPOCH = (
        subprocess.check_output([which("git"), "log", "-1", "--format=%ct"])
        .decode("utf-8")
        .strip()
    )
except Exception:
    # Fallback if git fails
    SOURCE_DATE_EPOCH = str(int(os.path.getmtime(__file__)))

# Parse package definitions from package.json
KERNEL_PACKAGES = {}
for py_pkg, version in KERNEL_PACKAGE_JSON.get("pypi-packages", {}).get("packages", {}).items():
    # Fix the path to be relative to the current directory
    if py_pkg.startswith("py/"):
        pkg_path = KERNEL_DIR / py_pkg
    else:
        pkg_path = KERNEL_DIR / py_pkg
    KERNEL_PACKAGES[pkg_path] = version

def build_wheels():
    """Build all the wheel files"""
    print("Building wheel files...")
    for py_pkg, version in KERNEL_PACKAGES.items():
        pkg_name = py_pkg.name
        print(f"[{pkg_name}] Building wheel...")
        
        # Ensure we have the build dependencies
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--break-system-packages", "hatch", "build", "wheel"])
        
        # Copy package to a temp dir for building
        temp_dir = KERNEL_DIR / "temp"
        if temp_dir.exists():
            shutil.rmtree(temp_dir)
        temp_dir.mkdir()
        
        # Copy the package
        if '/' in str(py_pkg):
            # Handle widgetsnbextension3/widgetsnbextension case
            parts = str(py_pkg).split('/')
            
            # Get the last part of the path (package name)
            pkg_name = parts[-1]
            
            # Handle the case where it's py/widgetsnbextension3/widgetsnbextension
            if len(parts) >= 3 and parts[-2] in ['widgetsnbextension3', 'widgetsnbextension4']:
                pkg_source = KERNEL_DIR / "py" / parts[-2] / parts[-1]
            else:
                pkg_source = KERNEL_DIR / "py" / pkg_name
                
            if not pkg_source.exists():
                print(f"Error: {pkg_source} does not exist")
                continue
                
            shutil.copytree(pkg_source, temp_dir / pkg_name)
            build_dir = temp_dir / pkg_name
        else:
            pkg_source = KERNEL_DIR / "py" / py_pkg.name
            if not pkg_source.exists():
                print(f"Error: {pkg_source} does not exist")
                continue
                
            shutil.copytree(pkg_source, temp_dir / py_pkg.name)
            build_dir = temp_dir / py_pkg.name
        
        # Build the wheel
        args = [sys.executable, "-m", "build", "--wheel", "."]
        env = os.environ.copy()
        env["SOURCE_DATE_EPOCH"] = SOURCE_DATE_EPOCH
        subprocess.check_call(args, cwd=str(build_dir), env=env)
        
        # Find and copy the wheel
        wheel_dir = build_dir / "dist"
        if wheel_dir.exists():
            for wheel in wheel_dir.glob(f"*{NOARCH_WHL}"):
                copy_wheel(wheel)
        
        # Clean up
        shutil.rmtree(temp_dir)

def copy_wheel(wheel_path):
    """Copy a wheel file to the pypi directory"""
    KERNEL_PYPI_DIR.mkdir(exist_ok=True)
    dest = KERNEL_PYPI_DIR / wheel_path.name
    print(f"Copying wheel {wheel_path.name} to {dest}")
    shutil.copy(wheel_path, dest)

def create_all_json():
    """Create the all.json index file"""
    print("Creating all.json index file...")
    KERNEL_PYPI_DIR.mkdir(exist_ok=True)
    
    all_json = {}
    for wheel in KERNEL_PYPI_DIR.glob(f"*{NOARCH_WHL}"):
        pkg_name = wheel.name.split("-")[0].replace("_", "-")
        version = wheel.name.split("-")[1]
        all_json[pkg_name] = {
            "latest": {
                "filename": wheel.name,
                "url": f"./{wheel.name}"
            }
        }
    
    all_json_path = KERNEL_PYPI_DIR / "all.json"
    all_json_path.write_text(json.dumps(all_json, indent=2))

def generate_pypi_ts():
    """Generate the _pypi.ts file"""
    print("Generating _pypi.ts file...")
    
    lines = [
        "// this file is autogenerated from the wheels in the pypi directory",
    ]
    
    # Add allJSONUrl
    lines.append(f'export const allJSONUrl = "pypi/all.json";')
    
    # Track variable names to avoid duplicates
    var_names = {}
    
    # Add each wheel
    for wheel in sorted(KERNEL_PYPI_DIR.glob(f"*{NOARCH_WHL}")):
        name = wheel.name.split("-")[0].replace("_", "")
        if name == "pyodidekernel":
            name = "pyodide_kernel"
            
        var_name = f"{name}WheelUrl"
        
        # Add suffix if the variable name already exists
        if var_name in var_names:
            var_names[var_name] += 1
            var_name = f"{var_name}{var_names[var_name]}"
        else:
            var_names[var_name] = 0
            
        lines.append(f'export const {var_name} = "pypi/{wheel.name}";')
    
    # Write the file
    KERNEL_PYPI_TS.write_text("\n".join(lines) + "\n")

if __name__ == "__main__":
    if KERNEL_PYPI_DIR.exists():
        shutil.rmtree(KERNEL_PYPI_DIR)
    KERNEL_PYPI_DIR.mkdir(exist_ok=True)
    
    # Build wheels from our local packages
    build_wheels()
    
    create_all_json()
    generate_pypi_ts()
    
    print("Done!") 